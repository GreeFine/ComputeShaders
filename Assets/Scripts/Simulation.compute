// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Simulation

struct Agent {
  float2 position;
  float angle;
  float speed;
  float4 color;
};

RWTexture2D<float4> renderTexture;
RWStructuredBuffer<Agent> agents;

int width;
int height;
const float moveSpeed = 2.0f;
float deltaTime;
float time;

float hash(uint value)
{
    value ^= 2747636419u;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    value ^= value >> 16;
    value ^= 2654435769u;
    return value;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


[numthreads(1024,1,1)]
void Simulation (uint3 id : SV_DispatchThreadID)
{
  Agent agent = agents[id.x + 1024 * id.y];
  float2 pos = agent.position;
  float random = hash(pos.y * width + pos.x + hash(id.x + time * 1000.0f));

	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 newPos = agent.position + direction * deltaTime * agent.speed;


   if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height) {
    random = hash(random);
    float randomAngleMult = scaleToRange01(random) / 4;

    if (newPos.x >= width) {
      agents[id.x].angle = (1 + randomAngleMult) *  3.1415;
    } else if (newPos.y < 0) {
      agents[id.x].angle = (0.75 + randomAngleMult) *  3.1415;
    } else if (newPos.x < 0) {
      agents[id.x].angle = (0 + randomAngleMult) *  3.1415;
    } else if (newPos.y >= height) {
      agents[id.x].angle = (1.75 + randomAngleMult) *  3.1415;
    }


    // newPos.x = min(width-1,max(0, newPos.x));
    // newPos.y = min(height-1,max(0, newPos.y));
    // agents[id.x].angle = randomAngle;
  }
  else {
    renderTexture[uint2(newPos)] = agent.color;
    // renderTexture[uint2(newPos) + 1] = 0;
    // renderTexture[uint2(newPos) - 1] = 0;
    // renderTexture[uint2(newPos) + width] = 0;
    // renderTexture[uint2(newPos) - width] = 0;
  }
  agents[id.x].position = newPos;
}

// [numthreads(1024,1,1)]
// void Simulation (uint3 id : SV_DispatchThreadID)
// {
//     uint pixelIndex = id.y * width + id.x * time; 
//     // renderTexture[id.xy] = scaleToRange01(hash(pixelIndex));
//     renderTexture[id.xy] = float4(scaleToRange01(hash(pixelIndex)), scaleToRange01(hash(pixelIndex * 2)), scaleToRange01(hash(pixelIndex * 3)), 1.f);
// }